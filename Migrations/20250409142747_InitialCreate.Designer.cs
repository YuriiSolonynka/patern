// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using patern;

#nullable disable

namespace patern.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20250409142747_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Hub", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SecurityServiceId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SecurityServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("Hubs");
                });

            modelBuilder.Entity("Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HubId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SecurityServiceId")
                        .HasColumnType("int");

                    b.Property<int>("SensorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HubId");

                    b.HasIndex("SecurityServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("SecurityService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SecurityServices");
                });

            modelBuilder.Entity("Sensor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BatteryLevel")
                        .HasColumnType("int");

                    b.Property<int>("HubId")
                        .HasColumnType("int");

                    b.Property<string>("SensorType")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HubId");

                    b.ToTable("Sensors");

                    b.HasDiscriminator<string>("SensorType").HasValue("Sensor");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MotionSensor", b =>
                {
                    b.HasBaseType("Sensor");

                    b.Property<float>("DetectionRange")
                        .HasColumnType("real");

                    b.Property<int>("SensitivityLevel")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Motion");
                });

            modelBuilder.Entity("SmokeSensor", b =>
                {
                    b.HasBaseType("Sensor");

                    b.Property<bool>("AlarmTriggered")
                        .HasColumnType("bit");

                    b.Property<int>("SmokeLevel")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Smoke");
                });

            modelBuilder.Entity("Hub", b =>
                {
                    b.HasOne("SecurityService", "SecurityService")
                        .WithMany("Hubs")
                        .HasForeignKey("SecurityServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("User", "User")
                        .WithMany("Hubs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SecurityService");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Notification", b =>
                {
                    b.HasOne("Hub", "Hub")
                        .WithMany("Notifications")
                        .HasForeignKey("HubId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SecurityService", "SecurityService")
                        .WithMany("Notifications")
                        .HasForeignKey("SecurityServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hub");

                    b.Navigation("SecurityService");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sensor", b =>
                {
                    b.HasOne("Hub", "Hub")
                        .WithMany("Sensors")
                        .HasForeignKey("HubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hub");
                });

            modelBuilder.Entity("Hub", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Sensors");
                });

            modelBuilder.Entity("SecurityService", b =>
                {
                    b.Navigation("Hubs");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Navigation("Hubs");

                    b.Navigation("Notifications");
                });
#pragma warning restore 612, 618
        }
    }
}
